package com.sudoku;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import com.sudoku.updater.SquareUpdater;
import com.sudoku.updater.Updater;
import com.sudoku.validator.UncompletedBoardValidator;
import com.sudoku.validator.Validator;

/**
 * Mutable
 * 
 * @author Matt Kent
 */
public class Board implements Iterable<Square> {

	private final Square[][] squares;
	private Updater updater;
	private UncompletedBoardValidator validator;
	private final int numRows;
	private final int numCols;
	private final int boxSize;
	private List<Square> squareList;
	private final SortedSet<Square> unsetSquares = new TreeSet<>(
			new PositionComparator());
	private final SortedSet<Square> setSquares = new TreeSet<>(
			new PositionComparator());
	private boolean justUpdated = true;

	public Board(final int[][] squares) {
		if (squares.length < 1) {
			throw new IllegalArgumentException(
					"squares must have a positive number of rows");
		}
		numRows = squares.length;
		numCols = squares[0].length;
		boxSize = (int) Math.round(Math.sqrt(numRows));
		this.squares = new Square[numRows][numCols];
		initSquares(squares);
		setSquareList();
		initSetAndUnsetSquares();
	}

	private Updater getUpdater() {
		if (updater == null) {
			updater = new SquareUpdater(this);
		}
		return updater;
	}

	public void updateFromAll() {
		final SortedSet<Square> setSquaresCopy = new TreeSet<>(setSquares);
		for (final Square square : setSquaresCopy) {
			getUpdater().update(square);
		}
	}

	public void updateFrom(final Square square) {
		getUpdater().update(square);
	}

	private void initSetAndUnsetSquares() {
		for (final Square square : squareList) {
			if (square.isSet()) {
				setSquares.add(square);
			} else {
				unsetSquares.add(square);
			}
		}
		System.out.println("unsetSquares=" + unsetSquares);
	}

	private void initSquares(final int[][] squares) {
		for (int row = 0; row < numRows; row++) {
			for (int col = 0; col < numCols; col++) {
				this.squares[row][col] = new Square((byte) squares[row][col],
						Position.getInstance(row, col), this);
			}
		}
	}

	public Board copy() {
		final int[][] squareValues = new int[numRows][numCols];
		for (int row = 0; row < numRows; row++) {
			for (int col = 0; col < numCols; col++) {
				squareValues[row][col] = squares[row][col].getValue();
			}
		}
		final Board result = new Board(squareValues);
		result.updateFromAll();
		return result;
	}

	private void setSquareList() {
		squareList = new ArrayList<Square>(numRows * numCols);
		for (int row = 0; row < numRows; row++) {
			for (int col = 0; col < numCols; col++) {
				squareList.add(squares[row][col]);
			}
		}
	}

	public Square getSquare(final int row, final int col) {
		return squares[row][col];
	}

	public Square getSquare(final Position pos) {
		return getSquare(pos.getRow(), pos.getCol());
	}

	public byte getValue(final int row, final int col) {
		return squares[row][col].getValue();
	}

	public int getNumRows() {
		return numRows;
	}

	public int getNumCols() {
		return numCols;
	}

	public int getBoxSize() {
		return boxSize;
	}

	public boolean wasJustUpdated() {
		return justUpdated;
	}

	public void setJustUpdated(final boolean justUpdated) {
		this.justUpdated = justUpdated;
	}

	public SortedSet<Square> getUnsetSquares() {
		return new TreeSet<Square>(unsetSquares);
	}

	public Set<Square> getSetSquares() {
		return new TreeSet<Square>(setSquares);
	}

	void squareUpdated(final Square square) {
		System.out.println("square set: " + square.toString());
		System.out.println("possible values: " + square.getPossibleValues());
		setSquares.add(square);
		unsetSquares.remove(square);
		System.out.println("unsetSquares=" + unsetSquares);
		System.out.println("num unsetSquares=" + unsetSquares.size());
	}

	private Validator getValidator() {
		if (validator == null) {
			validator = new UncompletedBoardValidator(this);
		}
		return validator;
	}

	public boolean isValid() {
		return validator.isValid();
	}

	@Override
	public String toString() {
		final StringBuilder result = new StringBuilder();
		for (int row = 0; row < numCols; row++) {
			result.append("[");
			for (int col = 0; col < numCols; col++) {
				result.append(squares[row][col].getValue());
				result.append(", ");
			}
			result.delete(result.length() - 2, result.length());
			result.append("]\n");
		}
		result.deleteCharAt(result.length() - 1);
		return result.toString();
	}

	@Override
	public Iterator<Square> iterator() {
		return squareList.iterator();
	}

}
