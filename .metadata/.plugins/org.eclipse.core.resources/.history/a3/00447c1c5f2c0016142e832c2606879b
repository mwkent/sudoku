package com.sudoku.guesser;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.SortedSet;

import com.sudoku.Board;
import com.sudoku.Square;
import com.sudoku.cache.BoardCache;

/**
 * @author Matt Kent
 */
public class BoardGuesser implements Guesser {

	private final BoardCache boardCache = new BoardCache();
	private final Deque<Guess> guesses = new ArrayDeque<>();

	public void guess(final Board board) {
		boardCache.cache(board);
		makeGuess();

	}

	public Board backtrack() {
		boardCache.getCached();
		removeInvalidGuess();
	}
	
	
	private void makeGuess() {
		final Square bestProspect = getBestProspect();
		final byte val = bestProspect.getPossibleValues().iterator().next();
		bestProspect.setValue(val);
		bestProspect.clearPossibleValues();
		final Guess guess = new Guess(bestProspect.getPosition(), val);
		guesses.push(guess);
		System.out.println("Guessed " + guess);
	}

	private void emptyGuess() {
		guesses.push(Guess.INVALID);
	}

	private Square getBestProspect() {
		final SortedSet<Square> unsetSquares = board.getUnsetSquares();
		Square bestProspect = unsetSquares.first();
		for (final Square square : unsetSquares) {
			if (square.getPossibleValues().size() < bestProspect
					.getPossibleValues().size()) {
				bestProspect = square;
			}
		}
		return bestProspect;
	}

	private void removeInvalidGuess() {
		final Guess mostRecentGuess = guesses.pop();
		if (mostRecentGuess != Guess.INVALID) {
			final Square guessedSquare = board.getSquare(mostRecentGuess
					.getPosition());
			guessedSquare.removePossibleValueAndUpdate(mostRecentGuess
					.getValue());
		}
	}

}
