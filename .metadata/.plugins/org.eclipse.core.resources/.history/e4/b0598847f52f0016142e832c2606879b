package com.sudoku.validator;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.sudoku.Board;
import com.sudoku.Position;
import com.sudoku.Square;

/**
 * @author Matt Kent
 */
public class AllRowsValidator implements Validator {

	private final List<RowValidator> rowValidators;

	public static AllRowsValidator newInstance(final Board board) {
		final List<RowValidator> rowValidators = new ArrayList<>(
				board.getLength());
		for (int row = 0; row < board.getLength(); row++) {
			rowValidators.add(new RowValidator(board, row));
		}
		return this(rowValidators);
	}

	AllRowsValidator(final List<RowValidator> rowValidators) {
		this.rowValidators = new ArrayList<RowValidator>(rowValidators);
	}

	@Override
	public boolean isValid() {
		for (int row = 0; row < board.getLength(); row++) {

			final Set<Byte> usedValues = new HashSet<Byte>(numRows);
			for (int col = 0; col < numCols; col++) {
				final byte val = board.getValue(row, col);
				if (val != Square.INVALID_VALUE) {
					if (usedValues.contains(val)) {
						System.out.println(Position.getInstance(row, col)
								+ " was invalid in the row");
						return false;
					}
					usedValues.add(val);
				}
			}
		}
		return true;
	}

}
